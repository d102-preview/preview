pipeline {
  agent any

  environment {
    NPM_CONFIG_CACHE = "${WORKSPACE}/.npm"
    CI = false

    GIT_MESSAGE = """${sh(
        script: 'git show -s --pretty="* Commit %h by %cn <%ce>%n* Title: %s%n* Date: %cI"',
        returnStdout: true
    )}"""
    CHANNEL = 'D102-Alert'
    SUCCESS_ICON = 'https://www.jenkins.io/images/logos/seonbi/256.png'
    FAIL_ICON = 'https://www.jenkins.io/images/logos/fire/256.png'
  }

  tools {
    nodejs 'NodeJS 20.11.0'
  }

  stages {
    stage('Build Frontend') {
      steps {
        withCredentials([file(credentialsId: 'front_profile', variable: 'PROD_ENV')]) {
          script {
            sh 'cd exec/ && chmod +x project-setup-frontend.sh && ./project-setup-frontend.sh'
            sh 'cd exec/ && chmod +x project-build-frontend.sh && ./project-build-frontend.sh'
          }
        }
      }
    }

    stage('Deploy Frontend') {
      steps([$class: 'BapSshPromotionPublisherPlugin']) {
        sshPublisher(
          continueOnError: false,
          failOnError: true,
          publishers: [
            sshPublisherDesc(
              configName: 'application', 
              verbose: true,
              transfers: [
                sshTransfer(
                  sourceFiles: 'frontend/dist/**',
                  removePrefix: 'frontend/dist/',
                  // remote의 경우에는 system의 remote directory가 앞에 prefix로 붙음
                  // "/home"으로 해서 사용자에 따라 다르게 갈 수 있도록 했음
                  remoteDirectory: '/jenkins/deploy/frontend/dist'
                ),
                sshTransfer(
                  sourceFiles: 'exec/deploy-frontend/*',
                  removePrefix: 'exec/deploy-frontend/',
                  remoteDirectory: '/jenkins/deploy/frontend',
                  execCommand: 'cd /home/jenkins/deploy/frontend && chmod 755 *.sh; \
                                ./stop-frontend.sh; \
                                ./start-frontend.sh'
                )
              ]
            )
          ]
        )
      }
    }

    stage('Health Check Frontend') {
      steps {
        sh 'sleep 20'
        script {
          withCredentials([string(credentialsId: 'frontend_url', variable: 'FRONTEND_URL')]) {
            def HEALTH = sh(
              returnStdout: true,
              script: "curl -s -o /dev/null -w '%{http_code}' ${FRONTEND_URL}"
            ).trim()

            if (HEALTH == "200") {
              echo "frontend success"
            } else {
              error "frontend fail"
            }
          }
        }
      }
    }
  }

  post {
    success {
      script {
        withCredentials([string(credentialsId: 'gitlab_repo_url', variable: 'GIT_URL')]) {
          withCredentials([string(credentialsId: 'mattermost_url', variable: 'MM_URL')]) {
            mattermostSend(
              color: 'good',
              message: "[Frontend] Deploy Success: ${env.BUILD_URL}\n${GIT_MESSAGE}",
              endpoint: "${MM_URL}",
              channel: "${CHANNEL}",
              icon: "${SUCCESS_ICON}"
            )
          }
        }
      }
    }
    failure {
      script {
        withCredentials([string(credentialsId: 'gitlab_repo_url', variable: 'GIT_URL')]) {
          withCredentials([string(credentialsId: 'mattermost_url', variable: 'MM_URL')]) {
            mattermostSend(
              color: 'danger',
              message: "[Frontend] Deploy Fail: ${env.BUILD_URL}\n${GIT_MESSAGE}",
              endpoint: "${MM_URL}",
              channel: "${CHANNEL}",
              icon: "${FAIL_ICON}"
            )
          }
        }
      }
    }
  }
}