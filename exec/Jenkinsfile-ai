pipeline {
  agent any

  environment {
    CI = false

    GIT_MESSAGE = """${sh(
        script: 'git show -s --pretty="* Commit %h by %cn <%ce>%n* Title: %s%n* Date: %cI"',
        returnStdout: true
    )}"""
    CHANNEL = 'D102-Alert'
    SUCCESS_ICON = 'https://www.jenkins.io/images/logos/seonbi/256.png'
    FAIL_ICON = 'https://www.jenkins.io/images/logos/fire/256.png'
  }

  stages {
    stage('Build and Push Images') {
      steps {
        sh 'cd exec/ && chmod +x docker-build-push-ai.sh && ./docker-build-push-ai.sh'
      }
    }

    stage('Copy .env to Deploy Directory') {
      steps {
        script {
          withCredentials([file(credentialsId: 'ai_env_docker_compose', variable: 'DC_ENV')]) {
            sh 'cd api-ai/ && chmod +x copy-docker-compose-env.sh && ./copy-docker-compose-env.sh'
          }
        }
      }
    }

    stage('Deploy API-AI') {
      steps([$class: 'BapSshPromotionPublisherPlugin']) {
        sshPublisher(
          continueOnError: false,
          failOnError: true,
          publishers: [
            sshPublisherDesc(
              configName: 'application',
              verbose: true,
              transfers: [
                sshTransfer(
                    sourceFiles: 'exec/deploy-api-ai/*',
                    removePrefix: 'exec/deploy-api-ai/',
                    remoteDirectory: '/jenkins/deploy/api-ai',
                    execCommand: 'cd /home/jenkins/deploy/api-ai && chmod 755 *.sh; \
                                  ./stop-ai.sh; \
                                  ./start-ai.sh'
                ),
                sshTransfer(
                    execCommand: 'cd /home/jenkins/deploy/frontend && chmod 755 *.sh; \
                                  ./stop-frontend.sh; \
                                  ./start-frontend.sh'
                )
              ]
            )
          ]
        )
      }
    }
  }

  stage('Health Check API-AI') {
      steps {
        sh 'sleep 20'
        script {
          withCredentials([string(credentialsId: 'api_ai_url', variable: 'API_AI_URL')]) {
            def HEALTH = sh(
              returnStdout: true,
              script: "curl -s -o /dev/null -w '%{http_code}' ${API_AI_URL}"
            ).trim()

            if (HEALTH == "200") {
              echo "api-ai success"
            } else {
              error "api-ai fail"
            }
          }
        }
      }
    }
  }

  post {
    success {
      script {
        withCredentials([string(credentialsId: 'gitlab_repo_url', variable: 'GIT_URL')]) {
          withCredentials([string(credentialsId: 'mattermost_url', variable: 'MM_URL')]) {
            mattermostSend(
              color: 'good',
              message: "[AI] Deploy Success: ${env.BUILD_URL}\n${GIT_MESSAGE}",
              endpoint: "${MM_URL}",
              channel: "${CHANNEL}",
              icon: "${SUCCESS_ICON}"
            )
          }
        }
      }
    }
    failure {
      script {
        withCredentials([string(credentialsId: 'gitlab_repo_url', variable: 'GIT_URL')]) {
          withCredentials([string(credentialsId: 'mattermost_url', variable: 'MM_URL')]) {
            mattermostSend(
              color: 'danger',
              message: "[AI] Deploy Fail: ${env.BUILD_URL}\n${GIT_MESSAGE}",
              endpoint: "${MM_URL}",
              channel: "${CHANNEL}",
              icon: "${FAIL_ICON}"
            )
          }
        }
      }
    }
  }
}
