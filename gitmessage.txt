################
# type, body, footer는 각각 공백 줄로 한칸씩 띄워작성합니다.
# 1. Type
# [Skill] type #이슈번호: Subject (공백 작성 시 주의)
# Ex)[FE] feat #22: 회원정보 수정 기능 추가
# Ex)[BE] feat #22: 회원정보 수정 기능 추가

################
# 1-1. Subject Type
#   - design:  UI에 변경사항이 있는 경우
#   - deploy: 배포와 관련된 커밋 
#   - docs: readme.md, json 파일 등 수정, 라이브러리 설치 (문서 관련)
#   - feat: 새로운 기능 구현
#   - fix: 오류 수정
#   - refactor: 코드 리팩토링
#   - setting: 개발 환경 구축과 관련된 커밋
#   - style: 코드에 변화가 없는 수정 (세미콜론 등)
#   - test: 테스트코드 관련 커밋
# 1-2. Subject
#   - 50글자를 넘지 않도록 작성
#   - 마침표 및 특수기호는 사용하지 않습니다.
#   - 제목은 완전한 서술형 문장이 아니라, 간결하고 요점적인 서술을 위해 개조식 구문을 사용
################(아래는 공백 유지 : Type과 Body의 구분)

# 2. Body
# body는 작업 내용이 복잡하거나 상세한 내용을 남겨야 하는 경우에만 작성
# Ex) 
# - 이미지 업로드 기능 추가
# - 회원 정보 수정 api 연동

################
# 2-1. Body 작성 규칙
#   - 본문은 72자 내로 작성
#   - 필요한 경우 여러줄로도 작성 가능
#   - 여러 줄의 메시지를 작성할 땐 "-"로 구분 
#   - 변경 내용보다 변경 이유를 작성해야 한다.(나중에 봤을 때 코드 작성 이유를 파악하기 위해)
################(아래는 공백 유지 : Body와 Footer의 구분)

# 3. Footer
# 선택 사항으로 코드 작업과 관련된 이슈 번호 또는 참조 링크 등을 추가
# Ex) Fixes: #1 (옵션_여기선 이슈번호에 []를 치면 안됨, 반영할려면 merge 필요)

################
# 3-1. Footer(꼬리말) 작성 규칙
#   - 꼬리말은 optional이며 이슈 트래커 ID를 작성
#   - 꼬리말은 "유형: #이슈 번호" 형식으로 사용
#   - 여러 개의 이슈 번호를 적을 때는 쉼표(,)로 구분
# 3-2. 이슈 트래커 유형
#   - Fixes: 이슈 수정 중(아직 해결되지 않은 경우)

# 최종 메세지 예시
# [FE] Feat #1: 회원정보 수정 기능 추가 
# (공백 필수)
# - 이미지 업로드 기능 추가(옵션)
# - 회원 정보 수정 api 연동(옵션)
# (공백 필수)
# Fixes: #1(옵션_여기선 이슈번호에 []를 치면 안됨, 반영할려면 merge 필요)

#################
# 참고사항
# - VS코드 안에서 커밋시 글자가 밀리는 현상이 발생하는데 결과물에는 영향을 안미칩니다.
# - ^M은 인코딩문제로 발생하는 것이므로 신경안쓰셔도됩니다.
#
# 커밋 메시지 템플릿 적용방법
# 1. local에서 명령어 입력하기
#    `git config --local commit.template gitmessage.txt`
#
# 2. commit 하기 (vim 기준)
#    - 'git add .'를 통해서 변경사항이 있는 파일을 스테이지에 올린다.
#    - 'git commit' 을 누르고 엔터를 치면 위의 템플릿이 나온다.
#    - 키보드에서 's'를 누르고 수정한 이후에 모든 커밋메세지를 입력한 후, 'esc'를 누르고 빠져나온다.
#    - ':wq'를 누르고 엔터를 치면 정상적으로 커밋이된다.